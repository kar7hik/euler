(in-package #:euler)

;;;;
(defun digits (n)
  "Return how many digits `n` has in base 10."
  (values (truncate (1+ (log n 10)))))

(defun definitely-palindrome-p (n)
  "Return whether `n` is a palindrome (in base 10), the slow-but-sure way."
  (let ((s (format nil "~D" n)))
    (string= s (reverse s))))

(defun palindrome-p (n)
  "Return whether `n` is a palindrome (in base 10)."
  (assert (>= n 0) (n) "~A must be a non-negative integer" n)
  ;; All even-length base-10 palindromes are divisible by 11, so we can shortcut
  ;; the awful string comparison. E.g.:
  ;;
  ;;   abccba =
  ;;   100001 * a +
  ;;   010010 * b +
  ;;   001100 * c
  (cond
    ((zerop n) t)
    ((and (evenp (digits n))
          (not (dividesp n 11))) nil)
    (t (definitely-palindrome-p n))))

(defun range (from below)
  (loop :for i :from from :below below
        :collect i))


;;;; Problems
(defun problem-1 ()
  ;; If we list all the natural numbers below 10 that are multiples of 3 or 5,
  ;; we get 3, 5, 6 and 9. The sum of these multiples is 23.
  ;;
  ;; Find the sum of all the multiples of 3 or 5 below 1000.
  (loop :for i :from 1 :below 1000
        :when (or (dividesp i 3)
                  (dividesp i 5))
        :sum i))

(defun problem-2 ()
  ;; Each new term in the Fibonacci sequence is generated by adding the previous
  ;; two terms. By starting with 1 and 2, the first 10 terms will be:
  ;;
  ;;     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  ;;
  ;; By considering the terms in the Fibonacci sequence whose values do not
  ;; exceed four million, find the sum of the even-valued terms.
  (loop :with p = 0
        :with n = 1
        :while (<= n 4000000)
        :when (evenp n) :sum n
        :do (psetf p n
                   n (+ p n))))

(defun problem-3 ()
  ;; The prime factors of 13195 are 5, 7, 13 and 29.
  ;;
  ;; What is the largest prime factor of the number 600851475143 ?
  (apply #'max (prime-factorization 600851475143)))

(defun problem-4 ()
  ;; A palindromic number reads the same both ways. The largest palindrome made
  ;; from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
  ;;
  ;; Find the largest palindrome made from the product of two 3-digit numbers.
  (let ((result (list)))
    (loop :for i :from 0 :to 999
          :do (loop :for j :from 0 :to 999
                    :for product = (* i j)
                    :when (palindrome-p product)
                    :do (push product result)))
    (apply #'max result)))

(defun problem-5 ()
  ;; 2520 is the smallest number that can be divided by each of the numbers from
  ;; 1 to 10 without any remainder.
  ;;
  ;; What is the smallest positive number that is evenly divisible by all of the
  ;; numbers from 1 to 20?
  (let ((divisors (range 11 21)))
    ;; all numbers are divisible by 1 and we can skip checking everything <= 10
    ;; because:
    ;;
    ;; anything divisible by 12 is automatically divisible by 2
    ;; anything divisible by 12 is automatically divisible by 3
    ;; anything divisible by 12 is automatically divisible by 4
    ;; anything divisible by 15 is automatically divisible by 5
    ;; anything divisible by 12 is automatically divisible by 6
    ;; anything divisible by 14 is automatically divisible by 7
    ;; anything divisible by 16 is automatically divisible by 8
    ;; anything divisible by 18 is automatically divisible by 9
    ;; anything divisible by 20 is automatically divisible by 10
    (loop :for i
          :from 20 :by 20 ; it must be divisible by 20
          :when (every (lambda (n) (dividesp i n))
                       divisors)
          :return i)))
